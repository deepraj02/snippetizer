{"version":3,"file":"extension.js","mappings":"uuBAKA,oBAAyBA,GACvB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,6BAA6BC,UAC5E,MAAMC,EAASJ,EAAOK,OAAOC,iBAC7B,IAAKF,EAEH,YADAJ,EAAOK,OAAOE,iBAAiB,qBAIjC,MAAMC,EAAYJ,EAAOI,UACnBC,EAAOL,EAAOM,SAASC,QAAQH,GAErC,IAAKC,EAEH,YADAT,EAAOK,OAAOE,iBAAiB,qBAKjC,MAAMK,QAAoB,IAAAC,UAAS,qBAAsB,6BACzD,GAAoB,OAAhBD,EAAwB,OAE5B,MAAME,QAAoB,IAAAD,UAAS,4BAA6B,oCAChE,GAAoB,OAAhBC,EAAwB,OAE5B,MAAMC,QAAqB,IAAAF,UAAS,+BAAgC,8BACpE,GAAqB,OAAjBE,EAEJ,IACE,MAAMC,QAAqB,IAAAC,oBACvBD,SACI,IAAAE,aAAYF,EAAcJ,EAAaE,EAAaC,EAAcN,EAE5E,CAAE,MAAOU,GACPnB,EAAOK,OAAOE,iBAAiB,0BAC/Ba,QAAQD,MAAM,wBAAyBA,EACzC,KAGFrB,EAAQuB,cAAcC,KAAKvB,EAC7B,EAEA,wBAA+B,EA7C/B,kBACA,SACA,SACA,Q,+sBCDA,WAAOI,eAAwBoB,EAAgBC,GAC3C,IAAIC,EACJ,OAAa,CAET,GADAA,QAAczB,EAAOK,OAAOqB,aAAa,CAAEH,YAAa,KAC1C,OAAVE,EACA,OAAO,KAEX,GAAIA,EACA,MAEAzB,EAAOK,OAAOE,iBAAiBiB,EAEvC,CACA,OAAOC,CACX,EAhBA,iB,+sBCIA,mCACI,OAAQE,EAAGC,YACP,IAAK,QACD,OAAOC,EAAKC,KAAKC,QAAQC,IAAIC,SAAW,GAAI,OAAQ,OAAQ,YAChE,IAAK,SACD,OAAOJ,EAAKC,KAAKH,EAAGO,UAAW,UAAW,sBAAuB,OAAQ,OAAQ,YACrF,QACI,OAAOL,EAAKC,KAAKH,EAAGO,UAAW,UAAW,OAAQ,OAAQ,YAEtE,EAbA,kBACA,W,+sBCEA,cAAO/B,eAA2BgC,EAAkBC,EAAcC,EAAqBC,EAAeC,GAClG,IAAIC,EAAc,KAClB,GAAIC,EAAGC,WAAWP,GACd,IACIK,QAAoBC,EAAGE,SAASC,SAAST,EAAU,QAEnDU,KAAKC,MAAMN,EACf,CAAE,MAAOrB,GACLC,QAAQD,MAAM,mDAAoDA,GAElEqB,EAAc,IAClB,CAIJA,EAAcA,EAAYO,OAAOC,QAAQ,KAAM,IAG3CR,EAAYS,OAAS,IACrBT,GAAe,KAYnBA,GARmB,QAClBJ,yBACYE,oBACHO,KAAKK,UAAUX,EAAKY,MAAM,gCAClBd,aAMlB,UACUI,EAAGE,SAASS,UAAUjB,EAAUK,GAGtC,MAAM9B,QAAiBV,EAAOqD,UAAUC,iBAAiBnB,SACnDnC,EAAOK,OAAOkD,iBAAiB7C,GAErCV,EAAOK,OAAOmD,uBAAuB,8BACzC,CAAE,MAAOrC,GAEL,MADAC,QAAQD,MAAM,8BAA+BA,GACzCA,aAAiBsC,MACX,IAAIA,MAAM,iCAAiCtC,EAAMuC,WAEjD,IAAID,MAAM,uDAExB,CACJ,EApDA,kBACA,W,+sBCMA,mBAAOtD,iBACH,MAAMwD,GAAiB,IAAAC,yBAEvB,UACUnB,EAAGE,SAASkB,MAAMF,EAAgB,CAAEG,WAAW,IACrD,MAAMC,QAActB,EAAGE,SAASqB,QAAQL,GAGnB,IAAjBI,EAAMd,QACNc,EAAMzC,KAAK,4BAGf,MAAMN,QAAqBhB,EAAOK,OAAO4D,cAAcF,EAAO,CAC1DG,YAAa,8CAGjB,GAAqB,6BAAjBlD,EAA6C,CAC7C,MAAMmD,QAAoBnE,EAAOK,OAAOqB,aAAa,CACjDH,OAAQ,uEAEZ,GAAI4C,EACA,OAAOtC,EAAKC,KAAK6B,EAAgB,GAAGQ,SAE5C,MAAO,GAAInD,EACP,OAAOa,EAAKC,KAAK6B,EAAgB3C,EAEzC,CAAE,MAAOG,GACLnB,EAAOK,OAAOE,iBAAiB,gCAAgCY,IACnE,CACA,MAAO,EACX,EArCA,kBACA,YACA,YACA,Q,UCHAiD,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://snippetizer/./src/extension.ts","webpack://snippetizer/./src/helpers/getInput.ts","webpack://snippetizer/./src/helpers/getSnippetsFolder.ts","webpack://snippetizer/./src/helpers/saveSnippet.ts","webpack://snippetizer/./src/helpers/showSnippetsFiles.ts","webpack://snippetizer/external commonjs \"vscode\"","webpack://snippetizer/external node-commonjs \"fs\"","webpack://snippetizer/external node-commonjs \"os\"","webpack://snippetizer/external node-commonjs \"path\"","webpack://snippetizer/webpack/bootstrap","webpack://snippetizer/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport { showSnippetFiles } from './helpers/showSnippetsFiles';\nimport { saveSnippet } from './helpers/saveSnippet';\nimport { getInput } from './helpers/getInput';\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand('snippetizer.createSnippet', async () => {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      vscode.window.showErrorMessage('No active editor!');\n      return;\n    }\n\n    const selection = editor.selection;\n    const text = editor.document.getText(selection);\n\n    if (!text) {\n      vscode.window.showErrorMessage('No text selected!');\n      return;\n    }\n\n\n    const snippetName = await getInput('Enter snippet name', 'Snippet name is required!');\n    if (snippetName === null) { return; }\n\n    const snippetDesc = await getInput('Enter snippet description', 'Snippet description is required!');\n    if (snippetDesc === null) { return; }\n\n    const snippetAlias = await getInput('Enter snippet alias (prefix)', 'Snippet alias is required!');\n    if (snippetAlias === null) { return; }\n\n    try {\n      const selectedFile = await showSnippetFiles();\n      if (selectedFile) {\n        await saveSnippet(selectedFile, snippetName, snippetDesc, snippetAlias, text);\n      }\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to add snippet:`);\n      console.error('Error adding snippet:', error);\n    }\n  });\n\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() { }","import * as vscode from 'vscode';\n\nexport async function getInput(prompt: string, errorMessage: string): Promise<string | null> {\n    let input: string | null;\n    while (true) {\n        input = await vscode.window.showInputBox({ prompt }) ?? null;\n        if (input === null) {\n            return null;\n        }\n        if (input) {\n            break;\n        } else {\n            vscode.window.showErrorMessage(errorMessage);\n        }\n    }\n    return input;\n}","import * as path from 'path';\nimport * as os from 'os';\n\n\nexport function getUserSnippetsFolder(): string {\n    switch (os.platform()) {\n        case 'win32':\n            return path.join(process.env.APPDATA || '', 'Code', 'User', 'snippets');\n        case 'darwin':\n            return path.join(os.homedir(), 'Library', 'Application Support', 'Code', 'User', 'snippets');\n        default: // Linux and others\n            return path.join(os.homedir(), '.config', 'Code', 'User', 'snippets');\n    }\n}\n\n","import * as vscode from 'vscode';\nimport * as fs from 'fs';\n\nexport async function saveSnippet(filePath: string, name: string, description: string, alias: string, body: string) {\n    let fileContent = '{}';\n    if (fs.existsSync(filePath)) {\n        try {\n            fileContent = await fs.promises.readFile(filePath, 'utf8');\n\n            JSON.parse(fileContent);\n        } catch (error) {\n            console.error('Error reading or parsing existing snippets file:', error);\n\n            fileContent = '{}';\n        }\n    }\n\n    // Remove the closing brace if it exists\n    fileContent = fileContent.trim().replace(/}$/, '');\n\n    // Add a comma if the file is not empty\n    if (fileContent.length > 1) {\n        fileContent += ',';\n    }\n\n    // Append the new snippet\n    const newSnippet = `\n  \"${name}\": {\n    \"prefix\": \"${alias}\",\n    \"body\": ${JSON.stringify(body.split('\\n'))},\n    \"description\": \"${description}\"\n  }\n}`;\n\n    fileContent += newSnippet;\n\n    try {\n        await fs.promises.writeFile(filePath, fileContent);\n\n        // Open the snippets file\n        const document = await vscode.workspace.openTextDocument(filePath);\n        await vscode.window.showTextDocument(document);\n\n        vscode.window.showInformationMessage('Snippet added successfully!');\n    } catch (error) {\n        console.error('Error writing snippet file:', error);\n        if (error instanceof Error) {\n            throw new Error(`Failed to write snippet file: ${error.message}`);\n        } else {\n            throw new Error('Failed to write snippet file due to an unknown error');\n        }\n    }\n}","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { getUserSnippetsFolder } from './getSnippetsFolder';\n\n\n\nexport async function showSnippetFiles(): Promise<string> {\n    const snippetsFolder = getUserSnippetsFolder();\n\n    try {\n        await fs.promises.mkdir(snippetsFolder, { recursive: true });\n        const files = await fs.promises.readdir(snippetsFolder);\n        // const snippetFiles = files.filter(file => file.endsWith('.json'));\n\n        if (files.length === 0) {\n            files.push('Create new snippets file');\n        }\n\n        const selectedFile = await vscode.window.showQuickPick(files, {\n            placeHolder: 'Select a snippet file or create a new one'\n        });\n\n        if (selectedFile === 'Create new snippets file') {\n            const newFileName = await vscode.window.showInputBox({\n                prompt: 'Enter the name for the new snippets file (without .json extension)'\n            });\n            if (newFileName) {\n                return path.join(snippetsFolder, `${newFileName}.json`);\n            }\n        } else if (selectedFile) {\n            return path.join(snippetsFolder, selectedFile);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Error reading snippet files: ${error}`);\n    }\n    return '';\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","disposable","vscode","commands","registerCommand","async","editor","window","activeTextEditor","showErrorMessage","selection","text","document","getText","snippetName","getInput","snippetDesc","snippetAlias","selectedFile","showSnippetFiles","saveSnippet","error","console","subscriptions","push","prompt","errorMessage","input","showInputBox","os","platform","path","join","process","env","APPDATA","homedir","filePath","name","description","alias","body","fileContent","fs","existsSync","promises","readFile","JSON","parse","trim","replace","length","stringify","split","writeFile","workspace","openTextDocument","showTextDocument","showInformationMessage","Error","message","snippetsFolder","getUserSnippetsFolder","mkdir","recursive","files","readdir","showQuickPick","placeHolder","newFileName","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}